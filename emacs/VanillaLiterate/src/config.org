#+TITLE: My Vanilla Emacs Literate Configuration
#+AUTHOR: Tomas Krulis

#+STARTUP: overview

#+TODO: IMPORTANT(i) |
#+TODO: TODO(t) ONGOING(o) | DONE(d)
#+TODO: | CANCELED(c)

* Introduction
:PROPERTIES:
:CUSTOM_ID: sec:introduction
:END:

This file is an ongoing project to create my own configuration from scratch to learn more about =emacs=. Working on this project should push me to better configure basic =emacs= functions, rather than test more and more =emacs= packages.

The main inspiration for this project is youtube video series of System Crafters, link: https://www.youtube.com/c/SystemCrafters/videos

This file is using a lot of =noweb= references, assembling each file from a small code blocks, written separately and commented in literate configuration text.

Having literate configuration has its own perks. With literate configuration you can write mostly text with embedded code blocks. Now you don't need comments anymore. On the other hand, if there is a mistake in configuration and it gets tangled to Emacs configuration files, your Emacs will not run correctly. To fix it you will have to open the file with working Emacs and tangle it again.

To do that, you have two options:

- start Emacs without any configuration loaded with =emacs -q=
- use chemacs2 and start Emacs with a working configuration (chemacs2 profile)

BOOKMARK: Emacs from Scratch video #1

** ONGOING Structure of this configuration

- Section [[#sec:early-init]] contains settings for =early-init.el=, mostly stolen from Doom Emacs or other users more knowledgeable about emacs startup optimization than me.
-

* early-init.el
:PROPERTIES:
:CUSTOM_ID: sec:early-init
:END:

#+NAME: gc-settings
#+BEGIN_SRC emacs-lisp
;; Defer garbage collection further back in the startup process
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)
#+END_SRC

Code block =gc-settings= introduces optimization tweaks to delay =emacs= garbage collection in startup. Function =gc-cons-percentage= should work together with =gc-cons-threshold= to initialize garbage collection. %%Poznámka -- zeptat se v Doom Emacs, zda má gc-cons-percentage nějaký praktický přínos.%%

#+NAME: no-stale-bytecode
#+BEGIN_SRC emacs-lisp
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
(setq load-prefer-newer noninteractive)
#+END_SRC

Commentary is courtesy of great Mr. Henrik Lissner from Doom Emacs. In this config, there will be a lot of stolen stuff from Doom Emacs and other users.

#+NAME disable-package.el
#+BEGIN_SRC emacs-lisp
;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)
;; Do not allow loading from the package cache (same reason).
(setq package-quickstart nil)
#+END_SRC

Previous code block and commentary is again mostly Doom Emacs and other peoples doing. This codeblock disables =package.el= running and working, since in this config I will use =straight.el= to install packages and =use-package.el= manage them. %%Poznámka: A znovu, Doom Emacs z nějakého důvodu nepoužívá package-quickstart, možná ji po vypnutí package není třeba eliminovat ...%%

#+BEGIN_SRC emacs-lisp
;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

;; Disable GUI elements
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
;; compiled ahead-of-time when they are installed and site files are compiled
;; when gccemacs is installed.
(setq comp-deferred-compilation nil)

;;; early-init.el ends here
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb yes :tangle ../custom-emacs/early-init.el
;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-
;; NOTE: early-init.el is now generated from config.org.  Please edit that file instead

<<gc-settings>>

<<no-stale-bytecode>>

<<disable-package.el>>
#+END_SRC

* Resources

- System Crafters youtube channel: https://www.youtube.com/c/SystemCrafters/videos

#  LocalWords:  youtube Crafters LocalWords chemacs
