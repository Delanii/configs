#+TITLE: My Vanilla Emacs Literate Configuration
#+AUTHOR: Tomas Krulis

#+STARTUP: content

#+TODO: IMPORTANT(i) |
#+TODO: TODO(t) ONGOING(o) | DONE(d)
#+TODO: | CANCELED(c)

* Introoduction
:PROPERTIES:
:CUSTOM_ID: sec:introduction
:END:

This file is an ongoing project to create my own configuration from scratch, to learn more about =emacs= and to be able to fully use it in my work, where I have no access to Doom Emacs goodness.

Also, working on this project should push me to better configure basic =emacs= functions, rather than test more and more =emacs= packages.

Having literate configuration has its own perks. With literate configuration you can write mostly text, with thrown-in code blocks, after which you actually don't need comments anymore. On the other hand, if there is an mistake in configuration and it gets tangled to =emacs= configuration files, to fix it you have to open the fie with =emacs= without any configuration: =emacs -q= and tangle it again.

This file is using a lot =noweb= references, assembling each file from a lot of smaller code blocks, written separately and commented in literate configuration text.

** ONGOING Structure of this configuration

- Section [[#sec:early-init]] contains settings for =early-init.el=, mostly stolen from Doom Emacs or other users more knowledgeable about emacs startup optimization than me.
-

* early-init.el
:PROPERTIES:
:CUSTOM_ID: sec:early-init
:END:

#+NAME: gc-settings
#+BEGIN_SRC emacs-lisp
;; Defer garbage collection further back in the startup process
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)
#+END_SRC

Code block =gc-settings= introduces optimization tweaks to delay =emacs= garbage collection in startup. Function =gc-cons-percentage= should work together with =gc-cons-threshold= to initialize garbage collection.

%%Záložka -- zetat se v Doom Emacs, zda má gc-cons-percentage nějaký praktický přínos.%%

#+BEGIN_SRC emacs-lisp
;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)
;; Do not allow loading from the package cache (same reason).
(setq package-quickstart nil)

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

;; Disable GUI elements
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
;; compiled ahead-of-time when they are installed and site files are compiled
;; when gccemacs is installed.
(setq comp-deferred-compilation nil)

;;; early-init.el ends here
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb yes :tangle ../custom-emacs-config/early-init.el
;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-
;; NOTE: early-init.el is now generated from config.org.  Please edit that file instead

<<gc-settings>>
#+END_SRC
